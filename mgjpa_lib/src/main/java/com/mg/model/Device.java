package com.mg.model;

// Generated Sep 18, 2016 9:01:23 AM by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.function.BiPredicate;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.mg.entities.IDevice;
import com.mg.entities.IDeviceAddable;

/**
 * Device generated by hbm2java
 */
@Entity
@Table(name = "mg_device", schema = "bolsos")
public class Device implements java.io.Serializable, BasicModel {

	private static final long serialVersionUID = 6006516316218557084L;
	private int id;
	private String fingerprint;
	private String userAgent;
	private String language;
	private String colorDepth;
	private Integer pixelRatio;
	private String resolution;
	private String availableResolution;
	private String timezoneOffset;
	private String cpuClass;
	private Boolean movil;
	private String navigatorPlatform;
	private Date creationDate;
	private List<DeviceUrl> deviceUrls = new ArrayList<DeviceUrl>();
	private Set<DeviceComponentHist> deviceComponentHists = new HashSet<DeviceComponentHist>(
			0);
	private Set<DeviceProduct> deviceProducts = new HashSet<DeviceProduct>(
			0);
	/*private Set<DeviceCollection> deviceCollections = new HashSet<DeviceCollection>(
			0);*/
	private Set<DeviceComponent> deviceComponents = new HashSet<DeviceComponent>(
			0);
	private Set<DeviceProductHist> deviceProductHists = new HashSet<DeviceProductHist>(
			0);
	private Set<DeviceUser> deviceUsers = new HashSet<DeviceUser>(0);
	/*private Set<DeviceCollectionHist> deviceCollectionHists = new HashSet<DeviceCollectionHist>(
			0);*/
	private Set<DeviceSession> deviceSessions = new HashSet<DeviceSession>(
			0);
	private Set<DeviceSuggestions> deviceSuggestions = new HashSet<DeviceSuggestions>(
			0);

	public Device() {
	}

	public Device(int id, String fingerprint, String userAgent,
			String language) {
		this.id = id;
		this.fingerprint = fingerprint;
		this.userAgent = userAgent;
		this.language = language;
	}

	public Device(int id, String fingerprint, String userAgent,
			String language, String colorDepth, Integer pixelRatio,
			String resolution, String availableResolution,
			String timezoneOffset, String cpuClass, String navigatorPlatform,
			Date creationDate, List<DeviceUrl> deviceUrls,
			Set<DeviceComponentHist> deviceComponentHists,
			Set<DeviceProduct> deviceProducts,
			Set<DeviceCollection> deviceCollections,
			Set<DeviceComponent> deviceComponents,
			Set<DeviceProductHist> deviceProductHists,
			Set<DeviceUser> deviceUsers,
			Set<DeviceCollectionHist> deviceCollectionHists) {
		this.id = id;
		this.fingerprint = fingerprint;
		this.userAgent = userAgent;
		this.language = language;
		this.colorDepth = colorDepth;
		this.pixelRatio = pixelRatio;
		this.resolution = resolution;
		this.availableResolution = availableResolution;
		this.timezoneOffset = timezoneOffset;
		this.cpuClass = cpuClass;
		this.navigatorPlatform = navigatorPlatform;
		this.creationDate = creationDate;
		this.deviceUrls = deviceUrls;
		this.deviceComponentHists = deviceComponentHists;
		this.deviceProducts = deviceProducts;
		//this.deviceCollections = deviceCollections;
		this.deviceComponents = deviceComponents;
		this.deviceProductHists = deviceProductHists;
		this.deviceUsers = deviceUsers;
		//this.deviceCollectionHists = deviceCollectionHists;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "seq_device_id")
	@SequenceGenerator(name="seq_device_id", sequenceName="bolsos.seq_device_id", initialValue=1, allocationSize= 1 )
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "fingerprint", nullable = false, length = 50)
	public String getFingerprint() {
		return this.fingerprint;
	}

	public void setFingerprint(String fingerprint) {
		this.fingerprint = fingerprint;
	}

	@Column(name = "user_agent", nullable = false, length = 200)
	public String getUserAgent() {
		return this.userAgent;
	}

	public void setUserAgent(String userAgent) {
		this.userAgent = userAgent;
	}

	@Column(name = "language", nullable = false, length = 5)
	public String getLanguage() {
		return this.language;
	}

	public void setLanguage(String language) {
		this.language = language;
	}

	@Column(name = "color_depth", length = 5)
	public String getColorDepth() {
		return this.colorDepth;
	}

	public void setColorDepth(String colorDepth) {
		this.colorDepth = colorDepth;
	}

	@Column(name = "pixel_ratio")
	public Integer getPixelRatio() {
		return this.pixelRatio;
	}

	public void setPixelRatio(Integer pixelRatio) {
		this.pixelRatio = pixelRatio;
	}

	@Column(name = "resolution", length = 10)
	public String getResolution() {
		return this.resolution;
	}

	public void setResolution(String resolution) {
		this.resolution = resolution;
	}

	@Column(name = "available_resolution", length = 10)
	public String getAvailableResolution() {
		return this.availableResolution;
	}

	public void setAvailableResolution(String availableResolution) {
		this.availableResolution = availableResolution;
	}

	@Column(name = "timezone_offset", length = 5)
	public String getTimezoneOffset() {
		return this.timezoneOffset;
	}

	public void setTimezoneOffset(String timezoneOffset) {
		this.timezoneOffset = timezoneOffset;
	}

	@Column(name = "cpu_class", length = 20)
	public String getCpuClass() {
		return this.cpuClass;
	}

	public void setCpuClass(String cpuClass) {
		this.cpuClass = cpuClass;
	}

	@Column(name = "navigator_platform", length = 20)
	public String getNavigatorPlatform() {
		return this.navigatorPlatform;
	}

	public void setNavigatorPlatform(String navigatorPlatform) {
		this.navigatorPlatform = navigatorPlatform;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creation_date", length = 29)
	public Date getCreationDate() {
		return this.creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "device", cascade=CascadeType.ALL)
	public List<DeviceUrl> getDeviceUrls() {
		return this.deviceUrls;
	}

	public void setDeviceUrls(List<DeviceUrl> deviceUrls) {
		this.deviceUrls = deviceUrls;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "device", cascade=CascadeType.ALL)
	public Set<DeviceComponentHist> getDeviceComponentHists() {
		return this.deviceComponentHists;
	}

	public void setDeviceComponentHists(
			Set<DeviceComponentHist> deviceComponentHists) {
		this.deviceComponentHists = deviceComponentHists;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "device", cascade=CascadeType.ALL)
	public Set<DeviceProduct> getDeviceProducts() {
		return this.deviceProducts;
	}

	public void setDeviceProducts(Set<DeviceProduct> deviceProducts) {
		this.deviceProducts = deviceProducts;
	}

	/*@OneToMany(fetch = FetchType.LAZY, mappedBy = "device", cascade=CascadeType.ALL)
	public Set<DeviceCollection> getDeviceCollections() {
		return this.deviceCollections;
	}

	public void setDeviceCollections(
			Set<DeviceCollection> deviceCollections) {
		this.deviceCollections = deviceCollections;
	}*/

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "device", cascade=CascadeType.ALL)
	public Set<DeviceComponent> getDeviceComponents() {
		return this.deviceComponents;
	}

	public void setDeviceComponents(Set<DeviceComponent> deviceComponents) {
		this.deviceComponents = deviceComponents;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "device", cascade=CascadeType.ALL)
	public Set<DeviceProductHist> getDeviceProductHists() {
		return this.deviceProductHists;
	}

	public void setDeviceProductHists(
			Set<DeviceProductHist> deviceProductHists) {
		this.deviceProductHists = deviceProductHists;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "device", cascade=CascadeType.ALL)
	public Set<DeviceUser> getDeviceUsers() {
		return this.deviceUsers;
	}

	public void setDeviceUsers(Set<DeviceUser> deviceUsers) {
		this.deviceUsers = deviceUsers;
	}

	/*@OneToMany(fetch = FetchType.LAZY, mappedBy = "device", cascade=CascadeType.ALL)
	public Set<DeviceCollectionHist> getDeviceCollectionHists() {
		return this.deviceCollectionHists;
	}

	public void setDeviceCollectionHists(
			Set<DeviceCollectionHist> deviceCollectionHists) {
		this.deviceCollectionHists = deviceCollectionHists;
	}*/

	@Column(name = "movil")
	public Boolean isMovil() {
		return movil;
	}

	public void setMovil(Boolean movil) {
		this.movil = movil;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "device", cascade=CascadeType.ALL)
	public Set<DeviceSession> getDeviceSessions() {
		return this.deviceSessions;
	}

	public void setDeviceSessions(Set<DeviceSession> deviceSessions) {
		this.deviceSessions = deviceSessions;
	}
	
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "device", cascade=CascadeType.ALL)
	public Set<DeviceSuggestions> getDeviceSuggestions() {
		return this.deviceSuggestions;
	}

	public void setDeviceSuggestions(Set<DeviceSuggestions> deviceSuggestions) {
		this.deviceSuggestions = deviceSuggestions;
	}

	public void add(Device device){
		if(this.deviceComponentHists.isEmpty()){
			this.deviceComponentHists = (Set<DeviceComponentHist>) changeDevice(device.getDeviceComponentHists());
		}
		else{
			this.deviceComponentHists.addAll(changeDevice(device.getDeviceComponentHists()));
		}
		if(this.deviceProductHists.isEmpty()){
			this.deviceProductHists = (Set<DeviceProductHist>) changeDevice(device.getDeviceProductHists());
		}
		else{
			this.deviceProductHists.addAll(changeDevice(device.getDeviceProductHists()));
		}
		if(this.deviceUrls.isEmpty()){
			this.deviceUrls = (List<DeviceUrl>) changeDevice(device.getDeviceUrls());
		}
		else{
			this.deviceUrls.addAll(changeDevice(device.getDeviceUrls()));
		}
		if(this.deviceSessions.isEmpty()){
			this.deviceSessions = (Set<DeviceSession>) changeDevice(device.getDeviceSessions());
		}
		else{
			this.deviceSessions.addAll(changeDevice(device.getDeviceSessions()));
		}
		addUsers(device.getDeviceUsers());
		addComponents(device.getDeviceComponents());
		addProducts(device.getDeviceProducts());
		addSuggestions(device.getDeviceSuggestions());
	}
	
	public void addDevice(Device device){
		this.deviceComponentHists = (Set<DeviceComponentHist>) changeDevice(device.getDeviceComponentHists());
		this.deviceProductHists = (Set<DeviceProductHist>) changeDevice(device.getDeviceProductHists());
		this.deviceUrls = (List<DeviceUrl>) changeDevice(device.getDeviceUrls());
		this.deviceSessions = (Set<DeviceSession>) changeDevice(device.getDeviceSessions());
		addUsers(device.getDeviceUsers());
		addComponents(device.getDeviceComponents());
		addProducts(device.getDeviceProducts());
		addSuggestions(device.getDeviceSuggestions());
	}

	private void addUsers(Set<DeviceUser> deviceUsersSet) {
		if( deviceUsersSet.size()>0 ){
			Set<DeviceUser> tempSet = new HashSet<DeviceUser>(0); 
			for (DeviceUser deviceUser1 : deviceUsersSet) {
				boolean found = false;
				for (DeviceUser deviceUser2 : deviceUsers) {
					if(deviceUser2.getUsers().getId() == deviceUser1.getUsers().getId()){
						deviceUser2.add(deviceUser1);
						found = true;
						break;
					}
				}
				if(!found){
					deviceUser1.setDevice(this);
					tempSet.add(deviceUser1);
				}
			}
			deviceUsers.addAll(changeDevice(tempSet));
		}
	}

	private void addProducts(Set<DeviceProduct> deviceProductsSet) {
		if( deviceProductsSet.size() > 0 ){
			Set<DeviceProduct> tempSet = new HashSet<DeviceProduct>(0); 
			for (DeviceProduct deviceProduct1 : deviceProductsSet) {
				boolean found = false;
				if(deviceProduct1 != null){
					for (DeviceProduct deviceProduct2 : deviceProducts) {
						if(deviceProduct2.getProduct() != null && 
						   deviceProduct2.getProduct().getId() == deviceProduct1.getProduct().getId()){
							deviceProduct2.add(deviceProduct1);
							found = true;
							break;
						}
					}
					if(!found){
						deviceProduct1.setDevice(this);
						tempSet.add(deviceProduct1);
					}
				}
			}
			deviceProducts.addAll(changeDevice(tempSet));
		}
	}
	
	private void addSuggestions (Set<DeviceSuggestions> seviceSuggestionsSet){
		BiPredicate<DeviceSuggestions, DeviceSuggestions> predicate = (i2,i1) -> i2.getCodeSuggestion() != null && i2.getCodeSuggestion().equals(i1.getCodeSuggestion()) ;
		addItemsToDevice(seviceSuggestionsSet, deviceSuggestions, predicate);
	}
	
	private <T extends IDeviceAddable> void addItemsToDevice(Set<T> deviceItemSet, Set<T> deviceSet, BiPredicate<T,T> predicate) {
		if( deviceItemSet.size() > 0 ){
			Set<T> tempSet = new HashSet<T>(0); 
			for (T item : deviceItemSet) {
				boolean found = false;
				if(item != null){
					for (T item2 : deviceSet) {
						if( predicate.test(item2,item) ){
							item2.add(item);
							found = true;
							break;
						}
					}
					if(!found){
						item.setDevice(this);
						tempSet.add(item);
					}
				}
			}
			deviceSet.addAll(changeDevice(tempSet));
		}
	}

	private void addComponents(Set<DeviceComponent> deviceComponentSet) {
		if( deviceComponentSet.size() > 0 ){
			Set<DeviceComponent> tempSet = new HashSet<DeviceComponent>(0);
			for (DeviceComponent deviceComponent1 : deviceComponentSet) {
				boolean found = false;
				if(deviceComponent1.getCustomComponentCollection() != null){
					for (DeviceComponent deviceComponent2 : deviceComponents) {
						if(deviceComponent2.getCustomComponentCollection() != null &&
						   deviceComponent2.getCustomComponentCollection().getId() == deviceComponent1.getCustomComponentCollection().getId()){
							deviceComponent2.add(deviceComponent1);
							found = true;
							break;
						}
					}
				}
				if(!found){
					deviceComponent1.setDevice(this);
					tempSet.add(deviceComponent1);
				}
			}
			deviceComponents.addAll(changeDevice(tempSet));
		}
	}

	private <T extends IDevice> java.util.Collection<T> changeDevice(java.util.Collection<T> collection){
		Iterator<T> iterator = collection.iterator();
		while(iterator.hasNext()){
			T t = iterator.next();
			if(t != null){ 
				t.setDevice(this);
			}
		}
		return collection;
	}

	@Override
	public String toString(){
		String info = " fingerprint: " + fingerprint;
		info = info + "\r\n" + " deviceUrls: " + deviceUrls.size();
		info = info + "\r\n" + " deviceComponentHists: " + deviceComponentHists.size();
		info = info + "\r\n" + " deviceProducts: " + deviceProducts.size();
		info = info + "\r\n" + " deviceComponents: " + deviceComponents.size();
		info = info + "\r\n" + " deviceProductHists: " + deviceProductHists.size();
		info = info + "\r\n" + " deviceUsers: " + deviceUsers.size();
		info = info + "\r\n" + " deviceSessions: " + deviceSessions.size();
		info = info + "\r\n" + " deviceSuggestions: " + deviceSuggestions.size();
		return info;
	}
}
