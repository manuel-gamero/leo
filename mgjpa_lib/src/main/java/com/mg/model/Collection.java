package com.mg.model;

// Generated 31-ene-2015 21:26:16 by Hibernate Tools 3.4.0.CR1

import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import com.mg.enums.CollectionStatus;
import com.mg.util.translation.IBasicTranslation;

/**
 * MgCollection generated by hbm2java
 */
@Entity
@Table(name = "mg_collection", schema = "bolsos", uniqueConstraints = { @UniqueConstraint(columnNames = "id") })
public class Collection implements java.io.Serializable, BasicModel,
		IBasicTranslation {

	private static final long serialVersionUID = -3198979211813278722L;
	private int id;
	private String code;
	private Translation translationByDescriptionTransId;
	private Translation translationByNameTransId;
	private CollectionStatus statusCode;
	private Set<Product> products = new HashSet<Product>(0);
	private Set<CustomComponentCollection> customComponentCollections = new HashSet<CustomComponentCollection>(
			0);
	private Date creationDate;
	private Image image;
	
	public static final Comparator<Collection> COLLECTION_COMPARATOR_CODE = new Comparator<Collection>() {
		public int compare(Collection item1, Collection item2) {
			return item2.getCode().compareTo(item1.getCode());
		}
	};


	public Collection() {
	}

	public Collection(int id, String code,
			Translation translationByNameTransId,
			Translation translationByDescriptionTransId,
			CollectionStatus statusCode) {
		this.id = id;
		this.code = code;
		this.translationByNameTransId = translationByNameTransId;
		this.translationByDescriptionTransId = translationByDescriptionTransId;
		this.statusCode = statusCode;
	}

	public Collection(int id, String code,
			Translation translationByNameTransId,
			Translation translationByDescriptionTransId,
			CollectionStatus statusCode, Date creationDate,
			Set<Product> products,
			Set<CustomComponentCollection> customComponentCollections) {
		this.id = id;
		this.code = code;
		this.translationByNameTransId = translationByNameTransId;
		this.translationByDescriptionTransId = translationByDescriptionTransId;
		this.statusCode = statusCode;
		this.creationDate = creationDate;
		this.products = products;
		this.customComponentCollections = customComponentCollections;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "seq_collection_id")
	@SequenceGenerator(name = "seq_collection_id", sequenceName = "bolsos.seq_collection_id", initialValue = 1, allocationSize = 1)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "code", nullable = false, length = 10)
	public String getCode() {
		return this.code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "collection")
	public Set<Product> getProducts() {
		return this.products;
	}

	public void setProducts(Set<Product> products) {
		this.products = products;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creation_date", length = 29)
	public Date getCreationDate() {
		if (this.creationDate == null) {
			return new Date();
		} else {
			return this.creationDate;
		}
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	// @OneToMany(fetch = FetchType.LAZY, mappedBy = "collection")

	// @OneToMany(cascade=CascadeType.ALL)
	// @JoinColumn(name = "collection_id")

	@OneToMany(mappedBy = "collection", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	public Set<CustomComponentCollection> getCustomComponentCollections() {
		return this.customComponentCollections;
	}

	public void setCustomComponentCollections(
			Set<CustomComponentCollection> customComponentCollections) {
		this.customComponentCollections = customComponentCollections;
	}

	@Column(name = "status_code", nullable = false, length = 10)
	@Enumerated(EnumType.STRING)
	public CollectionStatus getStatusCode() {
		return this.statusCode;
	}

	public void setStatusCode(CollectionStatus statusCode) {
		this.statusCode = statusCode;
	}

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "description_trans_id")
	public Translation getTranslationByDescriptionTransId() {
		return this.translationByDescriptionTransId;
	}

	public void setTranslationByDescriptionTransId(
			Translation translationByDescriptionTransId) {
		this.translationByDescriptionTransId = translationByDescriptionTransId;
	}

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "name_trans_id")
	public Translation getTranslationByNameTransId() {
		return this.translationByNameTransId;
	}

	public void setTranslationByNameTransId(Translation translationByNameTransId) {
		this.translationByNameTransId = translationByNameTransId;
	}

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "image_id")
	public Image getImage() {
		return this.image;
	}

	public void setImage(Image image) {
		this.image = image;
	}
	
	
}
